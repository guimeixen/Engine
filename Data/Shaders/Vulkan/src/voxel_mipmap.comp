#version 450
#extension GL_GOOGLE_include_directive : enable
#include "include/ubos.glsl"

tex3D_g(VOXEL_TEXTURE) srcVoxels;
image3D_g(VOXEL_IMAGE_MIPS, rgba8, writeonly) dstVoxels[8];
//layout(set = 0, binding = 9) uniform sampler3D srcVoxels;
//layout(set = 0, binding = 10, rgba8) uniform writeonly image3D dstVoxels[8];

PROPERTIES
{
	int mipIndex;		// The second mip starts at 1 in the dstVoxels array. We can also use it as the srcMipLevel in texelFetch
	int dstMipRes;
};

vec4[8] fetchTexels(ivec3 pos)
{
	return vec4[8] (texelFetch(srcVoxels, pos, mipIndex),
					texelFetch(srcVoxels, pos + ivec3(1, 0, 0), mipIndex),
					texelFetch(srcVoxels, pos + ivec3(1, 1, 0), mipIndex),
					texelFetch(srcVoxels, pos + ivec3(0, 0, 1), mipIndex),
					texelFetch(srcVoxels, pos + ivec3(0, 1, 0), mipIndex),
					texelFetch(srcVoxels, pos + ivec3(0, 1, 1), mipIndex),
					texelFetch(srcVoxels, pos + ivec3(1, 0, 1), mipIndex),
					texelFetch(srcVoxels, pos + ivec3(1, 1, 1), mipIndex));
}

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

void main()
{
	// Make sure were in range
	if (gl_GlobalInvocationID.x < dstMipRes && gl_GlobalInvocationID.y < dstMipRes && gl_GlobalInvocationID.z < dstMipRes)
	{
		ivec3 dstPos = ivec3(gl_GlobalInvocationID);
		ivec3 srcPos = dstPos * 2;
		
		vec4 values[8] = fetchTexels(srcPos);
		
		vec3 finalColor = vec3(0.0);
		float contributionCount = 0.0;
		float alpha = 0.0;
		
		for (int i = 0; i < 8; i++)
		{
			vec3 contribution = values[i].a > 0.0 ? vec3(1.0) : vec3(0.0);
			
			finalColor += values[i].rgb * contribution;
			contributionCount += contribution.x;
			alpha += values[i].a;
		}
		
		//alpha = contributionCount < 0.001 ? 0.0 : 1.0 / contributionCount;
		
		imageStore(dstVoxels[mipIndex + 1], dstPos, vec4(finalColor / contributionCount, alpha));
	}
}
